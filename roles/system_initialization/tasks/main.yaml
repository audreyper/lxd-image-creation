
- name: include vars file
  include_vars: "{{ playbook_dir }}/variables.yaml"

- name: Launch LXC container
  become: yes
  become_method: sudo
  community.general.lxd_container:
    name: "{{ new_container }}"
    ignore_volatile_options: true
    state: started
    source:
      type: image
      mode: pull
      server: https://cloud-images.ubuntu.com/releases
      protocol: simplestreams
      alias: "22.04"
    profiles: ["default"]
    wait_for_ipv4_addresses: true
    timeout: 600

- name: Check if user "{{ username1 }}" exists 
  ansible.builtin.shell: lxc exec "{{ new_container }}" -- id "{{ username1 }}"
  register: user_check
  failed_when: false
  changed_when: false

- name: Add user "{{ username1 }}"
  ansible.builtin.shell: lxc exec "{{ new_container }}" -- useradd -m -s /bin/bash "{{ username1 }}"
  when: "'no such user' in user_check.stderr.lower()"

- name: Check if user "{{ username1 }}" has sudo privileges. 
  ansible.builtin.shell: lxc exec "{{ new_container }}" -- getent group sudo | grep "{{ username1 }}"  
  register: sudo_group_check
  failed_when: false
  changed_when: false

- name: Give sudo privileges to user "{{ username1 }}"
  ansible.builtin.shell: lxc exec "{{ new_container }}" -- usermod -aG sudo "{{ username1 }}"
  become: yes
  become_method: sudo
  when: sudo_group_check.rc == 1 

- name: Check if user "{{ username1 }}" has passwordless sudo privileges
  ansible.builtin.shell: lxc exec "{{ new_container }}" -- grep '\{{ username1 }} ALL=(ALL) NOPASSWD:ALL' /etc/sudoers
  become: yes
  become_method: sudo
  failed_when: false
  changed_when: false
  register: passwordless_check

- name: Grant "{{ username1 }}" passwordless sudo privileges
  ansible.builtin.shell: lxc exec "{{ new_container }}" -- sh -c "echo '{{ username1 }} ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"
  become: yes
  become_method: sudo
  when: passwordless_check.rc == 1 

- name: Check if SSH server is installed
  ansible.builtin.shell: lxc exec "{{ new_container }}" -- which sshd
  register: sshd_check
  failed_when: false
  changed_when: false

- name: Install SSH server
  ansible.builtin.shell: lxc exec "{{ new_container }}" -- sh -c 'sudo apt update && sudo apt install -y openssh-server'
  when: sshd_check.rc == 1

- name: Check if .ssh directory exists
  ansible.builtin.shell: lxc exec "{{ new_container }}" -- sh -c 'test -d /home/{{ username1 }}/.ssh/'
  register: ssh_directory_check
  failed_when: false
  changed_when: false

- name: Create the .ssh directory 
  ansible.builtin.shell: lxc exec "{{ new_container }}" -- mkdir -p /home/{{ username1 }}/.ssh
  when: ssh_directory_check.rc == 1

- name: Check if authorized_keys file exists
  ansible.builtin.shell: lxc exec "{{ new_container }}" -- sh -c 'test -f /home/{{ username1 }}/.ssh/authorized_keys'
  register: authorized_keys_check
  failed_when: false
  changed_when: false

- name: Create authorized_keys file if it doesn't exist
  ansible.builtin.shell: lxc exec "{{ new_container }}" -- sh -c 'touch /home/{{ username1 }}/.ssh/authorized_keys'
  when: authorized_keys_check.rc == 1

- name: Check if public key is already in authorized_keys
  ansible.builtin.shell: lxc exec "{{ new_container }}" -- grep "$(cat ~/.ssh/id_ecdsa.pub)" /home/{{ username1 }}/.ssh/authorized_keys
  register: public_key_check
  failed_when: false
  changed_when: false

- name: Add public key to authorized_keys
  ansible.builtin.shell: lxc exec "{{ new_container }}" -- sh -c 'echo "{{ lookup('file', '~/.ssh/id_ecdsa.pub') }}" >> /home/{{ username1 }}/.ssh/authorized_keys'
  when: public_key_check.rc == 1
  
- name: Check if SSH port is commented out in sshd_config
  ansible.builtin.shell: lxc exec "{{ new_container }}" -- grep -q '^#Port' /etc/ssh/sshd_config
  register: port_check
  changed_when: false
  failed_when: false

- name: Uncomment SSH port in sshd_config
  ansible.builtin.shell: lxc exec "{{ new_container }}" -- sed -i 's/#Port/Port/' /etc/ssh/sshd_config
  when: port_check.rc == 0

- name: Restart SSH service if configuration changed
  ansible.builtin.shell: lxc exec "{{ new_container }}" -- systemctl restart ssh
  when: sshd_check.rc == 1 or ssh_directory_check.rc == 1 or public_key_check.rc == 1 or port_check.rc == 0

- name: Get LXD container IP
  ansible.builtin.raw: lxc list "{{ new_container }}" --format=json | jq -r '.[0].state.network.eth0.addresses[0].address'
  changed_when: false
  register: container_ip 

- name: Add the new host to the inventory with specified user
  add_host:
    name: "{{ container_ip.stdout_lines[0] }}"
    ansible_host: "{{ container_ip.stdout_lines[0] }}"
    groups: lxd_image
    ansible_user: "{{ username1 }}"
  delegate_to: localhost
 